// Note this file is pretty  much automatically generated by the following sed
// command...
//
//    sed -e '/^.*enum \([^ ]*\) {/,/.*};/ {\
//        s/enum \([^ ]*\) {/const char \*\1_names\[\] = {/ \
//        s/iBase_\([A-Z_0-9]\{3,\}\)\( = 0\)\{0,1\}\(,\)\{0,1\}/"\1"\3/ \
//    }' iBase.h > iBase_names.cpp
//
//    sed -e '/^.*enum \([^ ]*\) {/,/.*};/ {\
//        s/enum \([^ ]*\) {/const char \*\1_names\[\] = {/ \
//        s/iMesh_\([A-Z_0-9]\{3,\}\)\( = 0\)\{0,1\}\(,\)\{0,1\}/"\1"\3/ \
//    }' iMesh.h >> iBase_names.cpp

#ifndef __IBASE_NAMES_H__
#define __IBASE_NAMES_H__

#ifdef __cplusplus
extern "C"
{
#endif

    /*==========================================================
     * ENTITYTYPE ENUMERATION
     *==========================================================
     */
  const char *iBase_EntityType_names[] = {
    "VERTEX",
    "EDGE",
    "FACE",
    "REGION",
    "ALL_TYPES"
  };

    /*==========================================================
     * ADJACENCYCOST ENUMERATION
     *==========================================================
     */
  const char *iBase_AdjacencyCost_names[] = {
    "UNAVAILABLE",          /**< Adjacency information not supported */
    "ALL_ORDER_1",              /**< No more than local mesh traversal required */
    "ALL_ORDER_LOGN",           /**< Global tree search */
    "ALL_ORDER_N",              /**< Global exhaustive search */
    "SOME_ORDER_1",             /**< Only some adjacency info, local */
    "SOME_ORDER_LOGN",          /**< Only some adjacency info, tree */
    "SOME_ORDER_N"              /**< Only some adjacency info, exhaustive */
  };

    /*==========================================================
     * CREATIONSTATUS ENUMERATION
     *==========================================================
     */
  const char *iBase_CreationStatus_names[] = {
    "NEW",
    "ALREADY_EXISTED",
    "CREATED_DUPLICATE",
    "CREATION_FAILED"
  };

    /*==========================================================
     * ERRORACTIONS ENUMERATION
     *==========================================================
     */
  const char *iBase_ErrorActions_names[] = {
    "SILENT",
    "WARN_ONLY",
    "THROW_ERROR"
  };

    /*==========================================================
     * ERRORTYPE ENUMERATION
     *==========================================================
     */
  const char *iBase_ErrorType_names[] = {
    "SUCCESS",
    "MESH_ALREADY_LOADED",
    "NO_MESH_DATA",
    "FILE_NOT_FOUND",
    "FILE_WRITE_ERROR",
    "NIL_ARRAY",
    "BAD_ARRAY_SIZE",
    "BAD_ARRAY_DIMENSION",
    "INVALID_ENTITY_HANDLE",
    "INVALID_ENTITY_COUNT",
    "INVALID_ENTITY_TYPE",
    "INVALID_ENTITY_TOPOLOGY",
    "BAD_TYPE_AND_TOPO",
    "ENTITY_CREATION_ERROR",
    "INVALID_TAG_HANDLE",
    "TAG_NOT_FOUND",
    "TAG_ALREADY_EXISTS",
    "TAG_IN_USE",
    "INVALID_ENTITYSET_HANDLE",
    "INVALID_ITERATOR_HANDLE",
    "INVALID_ARGUMENT",
    "MEMORY_ALLOCATION_FAILED",
    "NOT_SUPPORTED",
    "FAILURE"
  };

    /*==========================================================
     * STORAGEORDER ENUMERATION
     *==========================================================
     */
  const char *iBase_StorageOrder_names[] = {
    "BLOCKED",
    "INTERLEAVED"
  };

    /*==========================================================
     * TAGVALUETYPE ENUMERATION
     *==========================================================
     */
  const char *iBase_TagValueType_names[] = {
    "INTEGER",
    "DOUBLE",
    "ENTITY_HANDLE",
    "BYTES"
  };

  const char *iMesh_EntityTopology_names[] = {
    "POINT",              /**< a general zero-dimensional entity  */
    "LINE_SEGMENT",       /**< a general one-dimensional entity  */
    "POLYGON",            /**< a general two-dimensional element  */
    "TRIANGLE",           /**< a three-sided, two-dimensional element  */
    "QUADRILATERAL",      /**< a four-sided, two-dimensional element  */
    "POLYHEDRON",         /**< a general three-dimensional element */
    "TETRAHEDRON",        /**< a four-sided, three-dimensional element whose
			       *     faces are triangles */
    "HEXAHEDRON",         /**< a six-sided, three-dimensional element whose
			       *     faces are quadrilaterals */
    "PRISM",              /**< a five-sided, three-dimensional element which
			       *     has three quadrilateral faces and two
			       *     triangular faces  */
    "PYRAMID",            /**< a five-sided, three-dimensional element
			       *     which has one quadrilateral face and four
			       *     triangular faces */
    "SEPTAHEDRON",        /**< a hexahedral entity with one collapsed edge */
    "ALL_TOPOLOGIES"      /**< allows the user to request information
			       *     about all the topology types */
  };

#ifdef __cplusplus
} // extern "C"
#endif
#endif
