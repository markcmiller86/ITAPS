#!/bin/sh
# Do a little magic to run perl from anywhere in your path.

lines=`cat $0 | wc -l`
lines=`expr $lines - 16`
checksys=`uname -s`
if [ "$checksys" != "SunOS" ]
then
  tail -n $lines $0 > /tmp/visitperl$$
else
  tail -$lines $0 > /tmp/visitperl$$
fi
echo "__END__" >> /tmp/visitperl$$
echo "$0 $*" >> /tmp/visitperl$$
exec perl /tmp/visitperl$$ $0 ${1+"$@"}

unlink $0;
$0 = shift @ARGV;

local (@varnames);
local (@vardefs);

### Gather the info...
local($tmpvardef) = "";
local($multilinedef) = 0;

while (<>) {
    # single line variable definition
    if (/^\s*(\w*)\s*=\s*([^\\]*)\s*$/) {
        if ($tmpvardef ne "") {
            chop($tmpvardef);
            push(@vardefs, $tmpvardef);
        }
        $tmpvardef = "";
        $multilinedef = 0;
        local($tmp) = $2;
        chop($tmp);
        push(@varnames, $1);
        push(@vardefs, $tmp);

    # beginning of a multi-line variable definition
    } elsif (/^\s*(\w*)\s*=\s*([^\\]*)\s*\\{1}$/) {
        push(@varnames, $1);
        $tmpvardef = $2;
        $multilinedef = 1;

    # continuation
    } elsif (/([^=]*)\\$/ and $multilinedef == 1) {
        $tmpvardef = "$tmpvardef $1";
        $multilinedef = 1;

    # must be blank line or something
    } else {
        if ($tmpvardef ne "") {
            chop($tmpvardef);
            push(@vardefs, $tmpvardef);
        }
        $tmpvardef = "";
        $multilinedef = 0;

    }
}

if ($#varnames != $#vardefs) {
    print "problem with array sizes\n";
}



$i = 0;
foreach $vn (@varnames) {
    local($def) = $vardefs[$i];
    $def =~ tr/ //s;

    print "SET($vn \"$def\" CACHE PATH \"imesh variable\")\n";
    $i = $i + 1;
}

exit 0;
