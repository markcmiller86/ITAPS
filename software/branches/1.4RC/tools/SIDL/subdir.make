# This is a common make file used to build all ITAPS interface bindins
# (i.e. iMesh, iGeom. etc.)
# It is expected to be invoked with FACE defined as Mesh, Geom. etc.
# It is expected to be invoked in a subdirectory named i$(FACE)

IFACE = i$(FACE)
subdir = /$(IFACE)
relpath = ../
include $(relpath)config.make

THIS_FILE = $(top_srcdir)/subdir.make

# All subdirs for client language bindings.  The list of subdirs
# that we are actually generating and compiling should be defined
# in $(LANG_BUILD_SUBDIRS).
CLIENT_DIRS = cclient cxxclient f77client f90client javaclient pyclient

IFACE_SIDL_FILES = $(srcdir)/$(IFACE).sidl $(IMPL_SIDL)

DIST_HEADERS =	$(IFACE).h $(IFACE_SIDL_FILES)

CONFIG_HEADERS = fmangle-$(IFACE).h

HEADERS = 

CONFIG_FILES = $(CONFIG_HEADERS:.h=.h.in)

DIST_FILES =	Makefile.in \
		$(DIST_HEADERS) \
		$(CONFIG_FILES) \
		

SIDL_FILES = $(top_srcdir)/iBase/iBase.sidl $(IFACE_SIDL_FILES)

BUILDDEP = $(IFACE)_protos.h fmangle-$(IFACE).h 

# Command to recurisvely build a subdirectory
SUBDIR_BLD = echo "cd $$dir && $(MAKE) -f ../$(top_srcdir)/$${dir}.make DIST_TMP=$(DIST_TMP)/$(IFACE) BASE_LINK=$${BASE_LIB} FACE=$(FACE) $@";\
                  (cd $$dir && $(MAKE) -f ../$(top_srcdir)/$${dir}.make DIST_TMP=$(DIST_TMP)/$(IFACE) BASE_LINK=$${BASE_LIB} FACE=$(FACE) $@) || exit 1

# For server and each client language binding, run babel to
# generate sources and makefile stub and then recurse to 
# compile babel sources.
all: $(BUILDDEP)
	@for dir in server $(LANG_BUILD_SUBDIRS); do \
	  test "xBase" = "x$(FACE)" || BASE_LIB="../../iBase/$${dir}/libiBase$${dir}.la"; \
	  echo "$(MAKE) -f $(THIS_FILE) FACE=$(FACE) "BASE_LINK=$$BASE_LIB" "IBASE_REPO=$(IBASE_REPO)" "IMPL_SIDL=$(IMPL_SIDL)" $${dir}/babel.make"; \
	  $(MAKE) -f $(THIS_FILE) FACE=$(FACE) "BASE_LINK=$$BASE_LIB" "IBASE_REPO=$(IBASE_REPO)" "IMPL_SIDL=$(IMPL_SIDL)" $${dir}/babel.make && \
	  $(SUBDIR_BLD); \
	done

debug:
	@echo "FACE = $(FACE)"
	@echo "IFACE = $(IFACE)"
	@echo "IMPL_SIDL = $(IMPL_SIDL)"
	@echo "IFACE_SIDL_FILES = $(IFACE_SIDL_FILES)"
	@echo "SIDL_FILES = $(SIDL_FILES)"
	@for dir in server $(CLIENT_DIRS); do \
	  ! test -f $$dir/babel.make || $(SUBDIR_BLD); \
	done
	

# Client directories can be removed entirely as they contain only
# code generated by babel.  We have to be careful about the server
# directory, though.  It will contain some *_Impl.cc and *_Impl.hh
# files that we want to keep.  If the source tree and build tree
# are different, we can just remove the server subdir.  Otherwise
# if here exists a babel.make, do a recursive make clean.  If
# babel.make doesn't exist, do thing because we don't want to 
# generate babel.make just to delete it and other generated files
# (if there's no babel.make, there shouldn't be any other 
# generated files.)
clean: 
	@if ! test "$(srcdir)" -ef "."; then \
	  echo "rm -rf server"; \
	  rm -rf server; \
	elif test -f server/babel.make; then \
	  dir=server; \
	  $(SUBDIR_BLD); \
	fi
	rm -rf $(CLIENT_DIRS)
	
check: check_noimpl check_impl

check_noimpl: all $(NO_IMPL_TESTS) 

check_impl: all $(IMPL_TESTS) 

install: all
	$(install_sh) -d $(includedir)
	$(install_sh) -m 644 -C $(IFACE_SIDL_FILES) $(includedir)
	@for dir in server $(LANG_BUILD_SUBDIRS); do \
	  $(SUBDIR_BLD); \
	done
	
dist: 
	test -d $(DIST_TMP)/$(IFACE) || $(mkdir_p) $(DIST_TMP)/$(IFACE)
	test -d $(DIST_TMP)/$(IFACE)/server || $(mkdir_p) $(DIST_TMP)/$(IFACE)/server
	for file in server/*_Impl.[ch] $(DIST_FILES) $(EXTRA_DIST); do \
	  if test -f $$file; then cp $$file $(DIST_TMP)/$(IFACE)/$$file; \
	  else cp $(srcdir)/$$file $(DIST_TMP)/$(IFACE)/$$file; fi;\
	done
	
XML_STAMP = ../iBase/xml/timestamp

$(XML_STAMP): $(top_srcdir)/iBase/iBase.sidl
	$(BABEL) $(BABELFLAGS) -E -tXML $< -o ../iBase/xml && touch $@

.PHONY: all debug clean check install dist check_impl check_noimpl

# For server, if the build tree is not the same as the source tree
# then copy *_Impl.* sources from source to target directory.  Babel's
# -V flag should allow for this, but it seems broken in 0.10.x
server/babel.make: $(SIDL_FILES) $(XML_STAMP)
	test -d server || $(mkdir_p) server
	@for file in $(srcdir)/server/*_Impl.[ch]; do \
	  if test $(srcdir)/server/$$file -nt server/$$file; then \
	    echo "cp -f $(srcdir)/server/$$file server/$$file"; \
            cp -f $(srcdir)/server/$$file server/$$file; \
	  fi; \
 	done
	$(BABEL) $(BABELFLAGS) -E -V$(srcdir)/server $(IBASE_REPO) -sC $(IFACE_SIDL_FILES) -o server && touch $@
	mv server/$(IFACE).h server/$(IFACE)_all.h

cclient/babel.make: $(SIDL_FILES) $(XML_STAMP)
	$(BABEL) $(BABELFLAGS) -E $(IBASE_REPO) -cC $(IFACE_SIDL_FILES) -o cclient && touch $@

cxxclient/babel.make: $(SIDL_FILES) $(XML_STAMP)
	$(BABEL) $(BABELFLAGS) -E $(IBASE_REPO) -cC++ $(IFACE_SIDL_FILES) -o cxxclient && touch $@

f77client/babel.make: $(SIDL_FILES) $(XML_STAMP)
	$(BABEL) $(BABELFLAGS) -E $(IBASE_REPO) -cF77 $(IFACE_SIDL_FILES) -o f77client && touch $@

f90client/babel.make: $(SIDL_FILES) $(XML_STAMP)
	$(BABEL) $(BABELFLAGS) -E $(IBASE_REPO) -cF90 $(IFACE_SIDL_FILES) -o f90client && touch $@

javaclient/babel.make: $(SIDL_FILES) $(XML_STAMP)
	$(BABEL) $(BABELFLAGS) -E $(IBASE_REPO) -cJava $(IFACE_SIDL_FILES) -o javaclient && touch $@

pyclient/babel.make: $(SIDL_FILES) $(XML_STAMP)
	$(BABEL) $(BABELFLAGS) -E $(IBASE_REPO) -cPython $(IFACE_SIDL_FILES) -o pyclient && touch $@


fmangle-$(IFACE).h: $(srcdir)/fmangle-$(IFACE).h.in ../config.status
	cd .. && ./config.status $(IFACE)/$@ && touch $(IFACE)/$@

$(top_srcdir)/config.status: $(top_srcdir)/configure
	cd $(top_srcdir) && $(MAKE) config.status

Makefile: $(srcdir)/Makefile.in ../config.status
	cd .. && ./config.status $(IFACE)/Makefile

SEDEXPR = 's/^[[:space:]]*void[[:space:]][[:space:]]*$(IFACE)_\([a-z][_a-zA-Z0-9]*\)[[:space:]]*(.*$$/$(IFACE)_\1/p'
$(IFACE)_protos.h: $(srcdir)/$(IFACE).h
	echo '#include "fmangle-$(IFACE).h"' > $@
	echo '#ifdef FC_FUNC_' >> $@
	echo >> $@
	for func in `$(SED) -n $(SEDEXPR) $<`; do \
	  lower=`echo $$func | tr '[:upper:]' '[:lower:]'`; \
          upper=`echo $$func | tr '[:lower:]' '[:upper:]'`; \
	  echo "#define $$func $(IFACE)_FC_FUNC_( $$lower, $$upper )" >> $@; \
        done
	echo >> $@
	echo "#endif" >> $@

